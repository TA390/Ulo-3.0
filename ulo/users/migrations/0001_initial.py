# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-19 17:50
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('str_id', models.CharField(max_length=20, verbose_name='String id')),
                ('email', models.EmailField(error_messages={'unique': 'This email address has already been registered.'}, help_text='Please enter your email address.', max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'This username has been taken.'}, help_text='Please choose a username. This can be changed later.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^\\w+$', 'Your username can only contain letters, numbers and underscores.')], verbose_name='username')),
                ('name', models.CharField(help_text='The name displayed on your profile page.', max_length=30, validators=[django.core.validators.RegexValidator('^[^<>\\[\\](){}="`\\\\/+_?!@#^*]+$', 'Your name cannot contain special characters.')], verbose_name='name')),
                ('dob', models.DateField(help_text='Your date of birth.', verbose_name='birthday')),
                ('photo', models.ImageField(default='default/profile.jpg', max_length=200, upload_to=users.models.User.file_path, verbose_name='photo')),
                ('thumbnail', models.ImageField(default='default/profile_thumb.jpg', max_length=220, upload_to=users.models.User.file_path, verbose_name='thumbnail')),
                ('location', models.CharField(blank=True, help_text='Your current location.', max_length=200, verbose_name='location')),
                ('blurb', models.CharField(blank=True, help_text='Short description about you, your page, or anything you wish to promote.', max_length=180, verbose_name='blurb')),
                ('gender', models.CharField(blank=True, choices=[(None, '---'), ('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='gender')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='user status')),
                ('is_verified', models.PositiveSmallIntegerField(default=0, help_text='Designates whether this user has had their email address verified so that they are who they claim to be.', verbose_name='email verified')),
                ('email_confirmed', models.BooleanField(default=False, help_text='Designates whether this user has confirmed thier email address.', verbose_name='email confirmation')),
                ('block', models.CharField(choices=[('', ''), ('1', 'Your account has been suspended due to misconduct.'), ('2', 'This account has been reported as belonging to another user.')], default='', help_text='Designates whether this user has had their account suspended', max_length=2, verbose_name='account suspended')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('posts_count', models.PositiveIntegerField(default=0, verbose_name='Posts counter')),
                ('followers_count', models.PositiveIntegerField(default=0, verbose_name='Followers counter')),
                ('following_count', models.PositiveIntegerField(default=0, verbose_name='Following counter')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
        ),
    ]
